#!/usr/bin/python3

import argparse
import configparser
from typing import Union

import RPi.GPIO as GPIO
from datetime import datetime, time

from microcontroller import Pin

from includes.includes import checkstate
from includes.includes import configfile
from includes.includes import debugmessage
from includes.includes import logwrite
from includes.includes import readshm
from includes.includes import run
from includes.includes import setup
from includes.includes import getpin

import os
import sys
from time import sleep

DEBUG = False
QUIET = False

def quiethours(now: time, starttime: time, endtime: time) -> bool:
    """
    check for quiet hours. to suppress activation of the relay when the noise disturbs the sleep of your plant...

    :param now: the time now
    :param starttime: the start hour
    :param endtime: the end hour
    :rtype: bool
    :return: bool true when 'now' falls between the start and endtime or false otherwise
    """
    if starttime <= endtime:
        return starttime <= now < endtime
    else: # over midnight e.g., 23:30-04:15
        return starttime <= now or now < endtime


def end(element: str, gpio: int, pidfile: str, runfile: str, logfile: str, debug: bool):
    """
    ends the daemon. turns off the relay when on and removes the pidfile.

    :param element: the daemon
    :param gpio: gpio for the relay
    :param pidfile: the pidfile
    :param logfile: the logfile
    :param runfile: the runfile
    :param debug: turn on debug messages
    """
    if checkstate(runfile, "r"):
        debugmessage("Stopping relay", debug)
        off(element, gpio, runfile, logfile, debug)
    debugmessage("removing pidfile", debug)
    os.remove(pidfile)


def on(element: str, gpio: int, runfile: str, logfile: str, debug: bool):
    """
    starts relay channel

    :param element: the daemon
    :param gpio: gpio for the relais
    :param runfile: the runfile
    :param logfile: the logfile
    :param debug: turn on debug messages
    """
    checkstate(runfile, "w", str(1))
    GPIO.output(gpio, 1)
    if not QUIET:
        logwrite(element, logfile, "relay {} started".format(element))
    debugmessage("status: relay started", debug)


def off(element: str, gpio: int, runfile: str, logfile: str, debug: bool):
    """
    stops relay channel

    :param element: the daemon
    :param gpio: gpio for the relais
    :param runfile: the runfile
    :param logfile: the logfile
    :param debug: turn on debug messages
    """
    checkstate(runfile, "w", str(0))
    GPIO.output(gpio, 0)
    if not QUIET:
        logwrite(element, logfile, "relay {} stopped".format(element))
    debugmessage("status: relay stopped", debug)


def decider(value: float, minval: float, maxval: float, mode: str) -> bool:
    """
    Function to decide if relay should be turned on or off.

    :param value: The measured sensor value
    :param minval: the minimum value
    :param maxval: the maximum value
    :param mode: 'maxon' -> turns the relay on, when the value is above maximum, off when under minimum
                 'maxoff'-> turns the relay off, when the value is above minimum, on when under minimum
                 both modes turn the relay off, when the value is in range of minval and maxval
    :rtype: bool
    :return: true -> the relay should turn on, false -> the relay should turn off
    """

    if mode == 'max-off':
        if minval <= value <= maxval:
            debugmessage("decision: off. value in min/max range", DEBUG)
            return False

        elif value < minval:
            debugmessage("decision: on. value < min", DEBUG)
            return True

        elif value > maxval:
            debugmessage("decision: off. value > max", DEBUG)
            return False

    elif mode == 'max-on':
        if minval <= value <= maxval:
            debugmessage("decision: off. value in min/max range", DEBUG)
            return False

        elif value < minval:
            debugmessage("decision: off. value < min", DEBUG)
            return False

        elif value > maxval:
            debugmessage("decision: on. value > max", DEBUG)
            return True


def daemon(element: str, pin: Union[Pin, Pin, Pin, Pin, Pin, Pin, Pin, int], pidfile: str, runfile: str, logfile: str) -> None:
    """
    main loop for daemon. checks every sleep_between_readings seconds (config.ini) the sensordata in shm and turn the relay on/off

    :param element: the element to control. water/air
    :param pin: the pin number on the raspberry
    :param pidfile: the pidfile
    :param runfile: the runfile
    :param logfile: the logfile
    :rtype: None
    """

    debugmessage("reading sensordata from shm..\n", DEBUG)
    while True:
        try:
            debugmessage("===growbox relay daemon===============\n", DEBUG)

            sensordata = str(readshm(sensordaemon_id))
            sensordata = sensordata.split(' ')
            config.read(configfile())

            sleep_between_readings = float(config['relay']['sleep_between_readings'])
            quiet_hours = config['relay']['quiet_hours'].split(',')

            mode = config[element]['relay_mode']
            minval = float(config[element]['min'])
            maxval = float(config[element]['max'])

            value = float(sensordata[int(config[element]['index'])])
            timestamp = sensordata[0] + ' ' + sensordata[1]

            debugmessage("{}\n{} (min={}, max={})".format(timestamp, value, minval, maxval), DEBUG)
            debugmessage("......................................", DEBUG)
            if not quiethours(datetime.now().time(), time(int(quiet_hours[0])), time(int(quiet_hours[1]))):
                if decider(value, minval, maxval, mode):
                    if not checkstate(runfile, "r"):
                        on(element, pin, runfile, logfile, DEBUG)
                    else:
                        debugmessage("status: relay already on", DEBUG)

                else:
                    if checkstate(runfile, "r"):
                        off(element, pin, runfile, logfile, DEBUG)
                    else:
                        debugmessage("status: relay already off", DEBUG)

            else:
                if checkstate(runfile, 'r'):
                    off(element, RELAY_GPIO, runfile, logfile, DEBUG)
                debugmessage("No action (quiet hour)", DEBUG)

            debugmessage("sleeping until next iteration", DEBUG)
            debugmessage("--------------------------------------\n", DEBUG)
            sleep(sleep_between_readings)

        except KeyboardInterrupt:
            debugmessage("Interrupt", DEBUG)
            end(element, RELAY_GPIO, pidfile, runfile, logfile, DEBUG)
            logwrite(element, logfile, "relay {} stopped by SIGINT".format(element))
            sys.exit(0)

        except SystemExit:
            debugmessage("Terminated", DEBUG)
            end(element, RELAY_GPIO, pidfile, runfile, logfile, DEBUG)
            logwrite(element, logfile, "relay {} stopped by SIGTERM".format(element))
            sys.exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='''The relay daemon''')
    group = parser.add_mutually_exclusive_group()
    parser.add_argument("-v", "--verbose",
                        action="store_true",
                        help='''increase output verbosity to stdout. don't do that in production.''')

    parser.add_argument("-q", "--quiet",
                        action="store_true",
                        help='''decrease log output''')

    group.add_argument("-d", "--daemon",
                       type=str, choices=["air", "water", "temperature"],
                       help='''starts the relay daemon with control of the chosen element (air controls ventilation, water controls the pump and cooling controls the cooling of the light emitting device).''')

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()

    if args.verbose:
        DEBUG = True

    if args.quiet:
        QUIET = True

    if args.daemon:
        DAEMON = args.daemon
        config = configparser.ConfigParser()
        config.read(configfile())

        pid, runf, log, sensordaemon_id = setup(DAEMON)

        GPIO.setmode(GPIO.BCM)
        RELAY_GPIO = getpin(int(config[DAEMON]['pin']), returntype='bcm')
        GPIO.setwarnings(False)
        GPIO.setup(RELAY_GPIO, GPIO.OUT)

        if not run(DAEMON, pid, DEBUG):
            exit(0)

        else:
            # sleep 3 seconds that the sensordaemon can read the sensors and write to the shm
            # to ensure we can read something from shm in case of a reboot
            sleep(3)
            daemon(DAEMON, RELAY_GPIO, pid, runf, log)
            # runs forever

        exit(0)

